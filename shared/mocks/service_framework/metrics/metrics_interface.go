// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	statsd "github.com/DataDog/datadog-go/v5/statsd"
	mock "github.com/stretchr/testify/mock"
)

// MetricsInterface is an autogenerated mock type for the MetricsInterface type
type MetricsInterface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MetricsInterface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: name, value, tags, rate
func (_m *MetricsInterface) Count(name string, value int64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Decr provides a mock function with given fields: name, tags, rate
func (_m *MetricsInterface) Decr(name string, tags []string, rate float64) error {
	ret := _m.Called(name, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, float64) error); ok {
		r0 = rf(name, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Event provides a mock function with given fields: e
func (_m *MetricsInterface) Event(e *statsd.Event) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(*statsd.Event) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gauge provides a mock function with given fields: name, value, tags, rate
func (_m *MetricsInterface) Gauge(name string, value float64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Incr provides a mock function with given fields: name, tags, rate
func (_m *MetricsInterface) Incr(name string, tags []string, rate float64) error {
	ret := _m.Called(name, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, float64) error); ok {
		r0 = rf(name, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceCheck provides a mock function with given fields: sc
func (_m *MetricsInterface) ServiceCheck(sc *statsd.ServiceCheck) error {
	ret := _m.Called(sc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*statsd.ServiceCheck) error); ok {
		r0 = rf(sc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimpleEvent provides a mock function with given fields: title, text
func (_m *MetricsInterface) SimpleEvent(title string, text string) error {
	ret := _m.Called(title, text)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(title, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMetricsInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetricsInterface creates a new instance of MetricsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetricsInterface(t mockConstructorTestingTNewMetricsInterface) *MetricsInterface {
	mock := &MetricsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
